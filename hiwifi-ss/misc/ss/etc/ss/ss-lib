#!/bin/sh

. /lib/functions/network.sh

dnsdep=/var/run/ss-dnsmasq.appdep

ss_log() {
	echo "`date` [log]<$$> $@" >>$applog
}

ss_err() {
	echo "`date` [err]<$$> $@" >>$applog
}

ss_stat() {
	echo $1 > $status_file
	echo "`date` [stat]<$$> *$1*" >>$applog
}

ss_set_server() {
	ss_log "set_server"
	[ ! -z "$1" ] 	&& uci set ssvpn.$appname.server_ip=$1
	[ ! -z "$2" ] 	&& uci set ssvpn.$appname.server_port=$2
	uci commit ssvpn
}

ss_setconfig() {
	ss_log "config: set"
	[ ! -e /etc/config/ssvpn ] && touch /etc/config/ssvpn

	#add interface and config to network
	uci set ssvpn.$appname=interface
	[ ! -z "$server_ip" ] 	&& uci set ssvpn.$appname.server_ip=$server_ip
	[ ! -z "$server_port" ] && uci set ssvpn.$appname.server_port=$server_port

	[ ! -z "$redir_port" ] 	&& uci set ssvpn.$appname.redir_port=$redir_port

	[ ! -z "$passwd" ] 		&& uci set ssvpn.$appname.passwd=$passwd

	[ ! -z "$dns_server" ] 	&& uci set ssvpn.$appname.dns_server=$dns_server
	[ ! -z "$dns_cb" ] 		&& uci set ssvpn.$appname.dns_cb=$dns_cb
	[ ! -z "$dns_hosts" ] 	&& uci set ssvpn.$appname.dns_hosts=$dns_hosts
	[ ! -z "$dns_list" ] 	&& uci set ssvpn.$appname.dns_list=$dns_list

	[ ! -z "$auth_cb" ] 	&& uci set ssvpn.$appname.auth_cb=$auth_cb

	[ ! -z "$ipt_cb" ] 		&& uci set ssvpn.$appname.ipt_cb=$ipt_cb

	[ ! -z "$app_param_a" ]	&& uci set ssvpn.$appname.app_param_a=$app_param_a
	[ ! -z "$app_param_b" ]	&& uci set ssvpn.$appname.app_param_a=$app_param_b
	[ ! -z "$app_param_c" ]	&& uci set ssvpn.$appname.app_param_a=$app_param_c
	[ ! -z "$app_param_d" ]	&& uci set ssvpn.$appname.app_param_a=$app_param_d
	uci commit ssvpn
}

ss_getconfig () {
	uci get ssvpn.$appname &>/dev/null
	[ $? -ne 0 ] && {
		ss_err "config: get failed, ssvpn.$appname doesn't exist"
		return
	}

	server_ip=$(uci get ssvpn.$appname.server_ip 2>/dev/null)
	server_port=$(uci get ssvpn.$appname.server_port 2>/dev/null)

	lan_ip=$(uci get network.lan.ipaddr 2>/dev/null)
	network_get_ipaddr wanip wan

	redir_ip=$lan_ip
	redir_port=$(uci get ssvpn.$appname.redir_port 2>/dev/null)

	passwd=$(uci get ssvpn.$appname.passwd 2>/dev/null)

	dns_server=$(uci get ssvpn.$appname.dns_server 2>/dev/null)
	dns_cb=$(uci get ssvpn.$appname.dns_cb 2>/dev/null)
	dns_hosts=$(uci get ssvpn.$appname.dns_hosts 2>/dev/null)
	dns_list=$(uci get ssvpn.$appname.dns_list 2>/dev/null)

	auth_cb=$(uci get ssvpn.$appname.auth_cb 2>/dev/null)

	ipt_cb=$(uci get ssvpn.$appname.ipt_cb 2>/dev/null)

	app_param_a=$(uci get ssvpn.$appname.app_param_a 2>/dev/null)
	app_param_b=$(uci get ssvpn.$appname.app_param_b 2>/dev/null)
	app_param_c=$(uci get ssvpn.$appname.app_param_c 2>/dev/null)
	app_param_d=$(uci get ssvpn.$appname.app_param_d 2>/dev/null)
}

ss_delconfig() {
	ss_log "config: del"
	uci delete ssvpn.$appname
	uci commit ssvpn
}

ss_iptables_add() {
	[ ! -z "$ipt_cb" ] && {
		ss_log "iptables: $ipt_cb add"
		$ipt_cb add
		return
	}

	iptables -t nat -N ${appname} &>/dev/null
	[ $? -ne 0 ] && {
		ss_err "iptables: add failed, ${appname} exists"
		return
	}
	ss_log "iptables: add"

	iptables -t nat -N $appname 
	iptables -t nat -A $appname -d $lan_ip/24 -j RETURN
	iptables -t nat -A $appname -d $wanip/24 -j RETURN
	[ ! -z "$server_ip" ] && iptables -t nat -A $appname -d $server_ip/32 -j RETURN

	iptables -t nat -N $appname-dynamic 
	iptables -t nat -A $appname -j $appname-dynamic 

	iptables -t nat -A $appname-pre -j $appname
	#iptables -t nat -A $appname-output -p udp -d $dns_server -j DNAT --to-destination $redir_ip:$redir_port
	[ "$appname" == "ssgoabroadng" -a ! -z "$server_ip" ] && {
		iptables -t nat -A $appname-output -p tcp --dport 80 -j $appname
		iptables -t nat -A $appname-output -p tcp --dport 443 -j $appname
	}
}

ss_iptables_del() {
	[ ! -z "$ipt_cb" ] && {
		ss_log "iptables: $ipt_cb del"
		$ipt_cb del
		return
	}

	ss_log "iptables: del"
	iptables -t nat -F $appname-output
	iptables -t nat -F $appname-pre
	iptables -t nat -F $appname
	iptables -t nat -X $appname
	iptables -t nat -F $appname-dynamic
	iptables -t nat -X $appname-dynamic
}

ss_up() {
	ss_log "ss_up: in"
	ss_iptables_add

	[ ! -z "$dns_cb" ] && {
		cp $dns_list $dnslist

		sed -i "/${appname}/d" $dnsdep
		echo "$appname $dns_cb $dns_hosts" >> $dnsdep

		ss_log "ss_up: dnsmasq restart"
		/etc/init.d/dnsmasq restart
	}

	ss_stat "running"
	ss_log "ss_up: out"
}

ss_down() {
	ss_log "ss_down: in"

	[ ! -z "$dns_cb" ] && {
		[ ! -e $dnslist ] && {
			ss_err "ss_down failed, $dnslist doesn't exist"
			return
		}
		rm $dnslist
		sed -i "/${appname}/d" $dnsdep
		/etc/init.d/dnsmasq restart
	}

	ss_iptables_del
	ss_stat "stopped"
	ss_log "ss_down: out"
}

ss_start() {
	echo >$applog
	ss_log "ss_start: in"

	enabled=$(uci get ssvpn.$appname.enabled)
	if [ "$enabled" -eq 0 ]; then
		ss_err "ss_start: failed, $appname was stopped in uci"
		return 1
	fi

	if [ -e $pidfile ]; then
		pid=$(cat $pidfile)
		num=$(ps www| grep $pid | grep $appname | wc -l )
		if [ "$num" -eq 1 ]; then
			ss_err "ss_start: failed, $appname is running."
			return 2
		else 
			ss_err "ss_start: $appname was stopped incidentally, re-stop it now"
			ss-stop
		fi	
	fi

	ss_stat "dailing"

	if [ ! -z "$auth_cb" ]; then
		ss-redir -b $redir_ip -l $redir_port -k $passwd -u -h $auth_cb -f $pidfile
	else
		ss-redir -s $server_ip -p $server_port -b $redir_ip -l $redir_port -k $passwd -u -f $pidfile
		[ $? -eq 0 ] && {
			ss_up
		}
	fi
	ss_log "ss_start: out"
}

ss_stop() {
	ss_log "ss_stop: in"
	ss_down
	kill -9 `cat $pidfile`
	rm $pidfile
	ss_log "ss_stop: out"
}

[ -z "$appname" ] && {
	ss_err "ss-lib: sourced without appname"
	exit 1
}

applog=/tmp/data/$appname.log
pidfile=/var/run/$appname.pid
status_file=/var/run/$appname.status
dnslist=/tmp/dnsmasq.d/$appname.dnslist

ss_getconfig

